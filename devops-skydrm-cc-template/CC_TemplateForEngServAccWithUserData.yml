AWSTemplateFormatVersion: '2010-09-09'
Description: 'Deploy CC for skyDRM'
Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0323c3dd2da7fb37d
    us-west-2:
      AMI: ami-0d6621c01e8c2de2c
Parameters:
  KeyName: 
    Description: Select the key name from the list
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair
    Default: sgdc-dev
  PublicHostedzoneId:
    Type: String
    Description: Please enter public hosted zone ID
    Default: Z1KA504V4FCSGG
  # PrivateHostedzoneId:
  #   Type: String
  #   Description: Please enter private hosted zone ID
  #   Default: Z064735923PV7V22CFL2K
  VpcId:
    Description: The VPC where you want to create EC2
    Type: AWS::EC2::VPC::Id
    Default: vpc-0e39e36e3c8ea851f
  # BastionSecurityGroupId:
  #   Description: Security group Id for Bastion instance
  #   Type: AWS::EC2::SecurityGroup
  #   Default: sg-0403af2eb3ba3099a 
  PrivateSubnetId1A:
    Description: The subnet where you want to create EC2
    Type: AWS::EC2::Subnet::Id
    Default: subnet-05574acdb41215a7d
  PrivateSubnetId1B:
    Description: The subnet where you want to create EC2
    Type: AWS::EC2::Subnet::Id
    Default: subnet-0cad967142fef3e22  
  PublicSubnetId1A:
    Description: The subnet where you want to create EC2
    Type: AWS::EC2::Subnet::Id
    Default: subnet-052e1a0295b00a303
  PublicSubnetId1B:
    Description: The subnet where you want to create EC2
    Type: AWS::EC2::Subnet::Id
    Default: subnet-09eefe6610f804add
  InstanceType:
    Description: Select the ec2 instance from the list
    Type: String
    Default: t2.large
    AllowedValues: [t2.large, m1.small,
      m1.medium, m1.large, m1.xlarge, m2.xlarge, m2.2xlarge, m2.4xlarge, m3.medium,
      m3.large, m3.xlarge, m3.2xlarge, m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge,
      m4.10xlarge, c1.medium, c1.xlarge, c3.large, c3.xlarge, c3.2xlarge, c3.4xlarge,
      c3.8xlarge, c4.large, c4.xlarge, c4.2xlarge, c4.4xlarge, c4.8xlarge, g2.2xlarge,
      g2.8xlarge, r3.large, r3.xlarge, r3.2xlarge, r3.4xlarge, r3.8xlarge, i2.xlarge,
      i2.2xlarge, i2.4xlarge, i2.8xlarge, d2.xlarge, d2.2xlarge, d2.4xlarge, d2.8xlarge,
      hi1.4xlarge, hs1.8xlarge, cr1.8xlarge, cc2.8xlarge, cg1.4xlarge]
  EC2VolumeType:
    Description: The volume type associated with the instance.
    Type: String
    AllowedValues:
        - gp2
        - standard
        - io1
    Default: gp2
  EC2VolumeSize:
    Type: String
    Description: The volume size associated with the instnace in gb.
    Default: 30 
  CertArn:
    Description: ACM Certificate Arn
    Type: String
    Default: arn:aws:acm:us-east-1:579292207088:certificate/3fde3e55-6515-4a25-92b9-29b525dd9bbf
  DomainName:
    Description: The route53 HostedZoneName. For example, "mydomain.com."  Don't forget the period at the end.
    Type: String
    Default: nextlabs.solutions.
  SubdomainName:
    Description: The subdomain of the dns entry. For example, hello -> hello.mydomain.com, hello is the subdomain.
    Type: String
    Default: NONE
    AllowedValues: 
      - default
      - NONE
  CCVersion:
    Description: Select cc version to deploy on instance
    Type: String 
    Default: 9.2.0.0
    AllowedValues:  
        - 9.2.0.0
        - 9.1.0.0
Conditions: 
  CreateNewRecordSet: !Equals [!Ref SubdomainName, NONE]
Resources:
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      SubnetId: !Ref PrivateSubnetId1A
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroupIds: 
        - !GetAtt SecurityGroup.GroupId
      BlockDeviceMappings: 
        - DeviceName: "/dev/xvda"
          Ebs: 
            VolumeType: !Ref EC2VolumeType
            DeleteOnTermination: True
            VolumeSize: !Ref EC2VolumeSize
      Tags:
        - Key: Name
          Value: New CC-template
        - Key: Owner
          Value: David.Lim@nextlabs.com   
        - Key: Project
          Value: SkyDRM.com Staging with CC 9.2 + RMS 268
        - Key: Region
          Value: SGDC
        - Key: TTL Shutdown Time
          Value: 24
        - Key: TTL Start Time
          Value: 10
      UserData:
        'Fn::Base64': 
          !Sub |
            #!/bin/bash

            hostnamectl set-hostname ${SubdomainName}.${DomainName}

            yum update -y
            yum install aws-cli unzip -y
            yum install docker -y

            service docker start 
            systemctl enable docker.service

            aws s3 cp s3://nxtlbsrelease/Platform_SAAS/cc/ControlCenter-Linux-chef-9.2.0.0-18PS-Main.zip /tmp
            unzip /tmp/ControlCenter-Linux-chef-9.2.0.0-18PS-Main.zip -d /usr/local
            mv /usr/local/PolicyServer/cc_properties.json /usr/local/PolicyServer/cc_properties.json.bak
            
            aws s3 cp s3://nxtlbsrelease/cc_properties_file/cc_properties.json  /usr/local/PolicyServer/
            aws s3 cp s3://nxtlbsrelease/License_file/license.dat /usr/local

            # Make Data Directory
            mkdir -p /home/ec2-user/ccdata  
            docker run -d -p 5432:5432 --name=ccdb -v /home/ec2-user/ccdata:/var/lib/postgresql/data -e POSTGRES_HOST_AUTH_METHOD=trust -e POSTGRES_USER=ccdbuser -e POSTGRES_DB=ccdb -e POSTGRES_PASSWORD=Next1234 --restart=always postgres:9.5

            docker ps

            cd /usr/local/PolicyServer
            chmod 775 -R /usr/local/PolicyServer

            ./install.sh -s
            systemctl start CompliantEnterpriseServer          
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: Allow SSH, HTTP and LoadBalancer Access
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0 
        #SourceSecurityGroupOwnerId: !Ref BastionSecurityGroupId
      - IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432
        CidrIp: 0.0.0.0/0 
        #SourceSecurityGroupOwnerId: sg-0403af2eb3ba3099a  
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0 
      - IpProtocol: tcp
        FromPort: 8443
        ToPort: 8443
        CidrIp: 0.0.0.0/0   
  EC2IAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref EC2IAMRole
  DNSRecordSet: 
    Type: AWS::Route53::RecordSetGroup
    Condition: CreateNewRecordSet
    Properties:
      Comment: Zone apex alias targeted to LoadBalancer.
      HostedZoneId: !Ref PublicHostedzoneId
      RecordSets:
        - Name: !Join ['', [!Ref 'SubdomainName', ., !Ref 'DomainName']]
          TTL: 900
          Type: CNAME
          ResourceRecords:
            - !GetAtt NetworkLoadBalancer.DNSName
  NetworkLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: networkloadbalancer
      Scheme: internet-facing
      Subnets: 
        - !Ref PublicSubnetId1A
        - !Ref PublicSubnetId1B
      Type: network
      Tags:
        - Key: Name
          Value: networklb
  NetworkLoadBalancerTargetGroup1:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: cc-target-group1
      HealthCheckEnabled: True
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /cas/login
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      Port: 443
      Protocol: TLS
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 300
      VpcId: !Ref VpcId    
      Targets:
        - Id: !Ref EC2Instance
          Port: 443
      TargetType: instance
  NetworkLoadBalancerTargetGroup2:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: cc-target-group2
      HealthCheckEnabled: True
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: TCP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      Port: 8443
      Protocol: TCP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 300
      VpcId: !Ref VpcId    
      Targets:
        - Id: !Ref EC2Instance
          Port: 8443
      TargetType: instance  
  NetworkLoadBalancerListener1:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates: 
        - CertificateArn: !Ref CertArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: 
            Ref: NetworkLoadBalancerTargetGroup1
      LoadBalancerArn: 
        Ref: NetworkLoadBalancer
      Port: 443
      Protocol: TLS
      SslPolicy: ELBSecurityPolicy-2016-08
  NetworkLoadBalancerListener2:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: 
            Ref: NetworkLoadBalancerTargetGroup2
      LoadBalancerArn: 
        Ref: NetworkLoadBalancer
      Port: 8443
      Protocol: TCP
           