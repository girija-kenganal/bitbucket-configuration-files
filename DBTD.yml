AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudAZ 2020.04 CC+JPC CF Template'
Mappings:
  RegionMap:
    us-west-2:
      AMI: ami-0b3ae729038e54e43
Parameters:
  IAMRole:
    Description: Please enter IAM role you want to use
    Type: String
    ConstraintDescription: must be a valid IAM Role
    Default: ecsInstanceRole
  KeyName: 
    Description: Select the key name from the list
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair
    Default: sgdc-dev
  InstanceType:
    Description: Select the ec2 instance from the list
    Type: String
    Default: t2.xlarge
    AllowedValues: [t2.large, m1.small, t2.xlarge] 
  EC2VolumeType:
    Description: The volume type associated with the instance.
    Type: String
    AllowedValues:
        - gp2 
        - standard
        - io1
    Default: gp2
  EC2VolumeSize:
    Type: String
    Description: The volume size associated with the instnace in gb.
    Default: 100 
  ClusterName:
    Type: String
    Default: CLOUDAZ-2020-04
  DBTaskDefinitionName:
    Type: String
    Description: Name of app requiring ELB exposure
    Default: CLOUDAZ-2020-04-DB
  DBImageURL:
    Type: String
    Default: postgres:9.5
  DBServiceName:
    Type: String
    Default: cloudaz-2020-04-db
  DBLogGroupName:
    Type: String
    Default: /ecs/cloudaz-2020-04-db
  DBContainerName:
    Type: String
    Description: Name of app requiring ELB exposure
    Default: db
  VpcId:
    Description: The VPC where you want to create EC2
    Type: AWS::EC2::VPC::Id
    Default: vpc-0023b794e300f2a52
  PrivateSubnetId1A:
    Description: The subnet where you want to create EC2
    Type: AWS::EC2::Subnet::Id
    Default: subnet-084b3716170a8a3d2
  PrivateSubnetId1B:
    Description: The subnet where you want to create EC2
    Type: AWS::EC2::Subnet::Id
    Default: subnet-010802dfb0a2d6962
  PublicSubnetId1A:
    Description: The subnet where you want to create EC2
    Type: AWS::EC2::Subnet::Id
    Default: subnet-0d4d8df4afb5768bc
  PublicSubnetId1B:
    Description: The subnet where you want to create EC2
    Type: AWS::EC2::Subnet::Id
    Default: subnet-069d47b0588c1f000
  CertArn:
    Description: ACM Certificate Arn
    Type: String
    Default: arn:aws:acm:us-west-2:025378961092:certificate/e108b98f-c951-4734-99f4-f8971161157e
Resources:
  EC2Instance:
    DependsOn:
        - Cluster
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref IAMRole
      SubnetId: !Ref PrivateSubnetId1A
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroupIds: 
        - !Ref DAESG
      BlockDeviceMappings: 
        - DeviceName: "/dev/xvda"
          Ebs: 
            VolumeType: !Ref EC2VolumeType
            DeleteOnTermination: True
            VolumeSize: !Ref EC2VolumeSize
      Tags:
        - Key: Name
          Value: CloudAZ 2020.04 CC+JPC
      UserData: 
          'Fn::Base64': 
            !Sub |  
                #!/bin/bash -xe
                #Install docker and start docker service
                yum update -y
                amazon-linux-extras install docker
                service docker start
                usermod -a -G docker ec2-user
                #touch /etc/ecs/ecs.config
                echo "ECS_CLUSTER= ${ClusterName}" >> /etc/ecs/ecs.config
                
                #Install ecs agent and start ecs
                #amazon-linux-extras install -y ecs
                #systemctl enable --now ecs
                #yum install -y ecs-init
                #start ecs
                yum update -y ecs-init
                #this will update ECS agent, better when using custom AMI
                /usr/bin/docker pull amazon/amazon-ecs-agent:latest
                #Restart docker and ECS agent
                service docker restart
                start ecs
                #cc source volume path  
                mkdir -p /opt/nextlabs/control-center/cc-logs
                #jpc source volume path 
                mkdir -p /opt/nextlabs/PolicyServer/server/pdp-logs
                mkdir -p /opt/nextlabs/PolicyServer/server/pdp-jservice
                mkdir -p /opt/nextlabs/PolicyServer/server/pdp-lib
                #db source volume path
                mkdir -p /opt/nextlabs/postgres-data
                #icenet source volume path
                mkdir -p /opt/nextlabs/PolicyServer/server/icenet-logs
                #pv source volume path
                mkdir -p /opt/policyvalidator/data
  DAESG:
      Type: AWS::EC2::SecurityGroup
      DependsOn: 
        - ApplicationLBSecurityGroup
      Properties:
        VpcId: !Ref VpcId
        GroupDescription: Allow SSH Access
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0 
          #SourceSecurityGroupOwnerId: !Ref BastionSecurityGroupId
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0 
          #SourceSecurityGroupOwnerId: sg-0403af2eb3ba3099a  
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          #SourceSecurityGroupOwnerId: !GetAtt [NetworkLoadBalancer, ]
        - IpProtocol: tcp
          FromPort: 8443
          ToPort: 8443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 58080
          ToPort: 58080
          CidrIp: 0.0.0.0/0
  ApplicationLBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: Allow SSH, HTTP and LoadBalancer Access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0 
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
  NetworkLoadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        IpAddressType: ipv4
        Name: networkloadbalancer
        Scheme: internet-facing
        Subnets: 
          - !Ref PublicSubnetId1A
        Type: network
        Tags:
          - Key: Name
            Value: networklb
  NetworkLoadBalancerListener1:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates: 
        - CertificateArn: !Ref CertArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: 
            Ref: NetworkLoadBalancerCCTargetGroup1
      LoadBalancerArn: 
        Ref: NetworkLoadBalancer
      Port: 443
      Protocol: TLS
      SslPolicy: ELBSecurityPolicy-2016-08
  NetworkLoadBalancerCCTargetGroup1:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: cc-target-group1
      HealthCheckEnabled: True
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /cas/login
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      Port: 443
      Protocol: TLS
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 300
      VpcId: !Ref VpcId    
      # Targets:
      #   - Id: !Ref EC2Instance
      #     Port: 443
      TargetType: instance
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ClusterName
  DBtaskdefinition:
      Type: AWS::ECS::TaskDefinition
      Properties:
        Family: !Ref DBTaskDefinitionName 
        NetworkMode: bridge
        RequiresCompatibilities: 
          - EC2
        ContainerDefinitions:
          - Name: !Ref DBContainerName
            Image: !Ref DBImageURL
            MountPoints:
              - SourceVolume: cc-db
                ContainerPath: /var/lib/postgresql/data
            Environment:
              - Name: PGDATA
                Value: /var/lib/postgresql/data/pgdata
              - Name: POSTGRES_DB
                Value: ccdb
              - Name: POSTGRES_PASSWORD
                Value: itisBlue888!
              - Name: POSTGRES_USER
                Value: ccdbuser
            PortMappings:
              - ContainerPort: 5432
                HostPort: 5432
            LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-region: !Ref AWS::Region
                awslogs-group: !Ref DBLogGroupName
                awslogs-stream-prefix: ecs       
            Memory: '2048'
            Essential: true
        Volumes:
          - Host:
              SourcePath: /opt/nextlabs/postgres-data
            Name: cc-db
  DBservice:
      Type: AWS::ECS::Service
      # This dependency is needed so that the load balancer is setup correctly on time
      DependsOn: NetworkLoadBalancerListener1
      Properties:
        ServiceName: !Ref DBServiceName
        Cluster: !Ref Cluster
        TaskDefinition: !Ref DBtaskdefinition
        DeploymentConfiguration:
          MaximumPercent: 200
          MinimumHealthyPercent: 100
        DesiredCount: 0
        #This may need to be adjusted if the container takes a while to start up
        #HealthCheckGracePeriodSeconds: 30
        LaunchType: EC2
        PlacementStrategies:
          - Type: binpack
            Field: memory